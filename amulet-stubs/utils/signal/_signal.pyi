import PySide6.QtCore
from _typeshed import Incomplete
from typing import Any, Callable, Optional, Protocol, Union, overload

class SignalInstance(Protocol):
    def connect(self, slot: Union[Callable, SignalInstance], type: Union[None, PySide6.QtCore.Qt.ConnectionType] = ...): ...
    def disconnect(self, slot: Optional[Union[Callable, SignalInstance]] = ...): ...
    def emit(self, *args: Any): ...

_signal_instance_constructor: Optional[SignalInstanceConstructor]

def create_signal_instance(*types: type, instance: Any, name: str = ..., arguments: list[str] = ...) -> SignalInstance:
    """Create a new signal instance"""

SignalInstanceCacheName: str

def _get_signal_instances(instance) -> dict: ...

class Signal:
    _types: Incomplete
    _name: Incomplete
    _arguments: Incomplete
    def __init__(self, *types: type, name: str = ..., arguments: list[str] = ...) -> None: ...
    @overload
    def __get__(self, instance: None, owner: Optional[Any]) -> Signal: ...
    @overload
    def __get__(self, instance: Any, owner: Optional[Any]) -> SignalInstance: ...

class SignalInstanceConstructor(Protocol):
    def __call__(self, *, types: tuple[type, ...], name: str, arguments: list[str], instance: Any) -> SignalInstance: ...

def set_signal_instance_constructor(constructor: SignalInstanceConstructor): ...
def get_fallback_signal_instance_constructor() -> SignalInstanceConstructor: ...
def get_pyside6_signal_instance_constructor() -> SignalInstanceConstructor: ...
