import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from collections.abc import Container
from typing import Any, Generic, TypeVar

class AbstractVersion(ABC, metaclass=abc.ABCMeta):
    _platform: Incomplete
    def __init__(self, platform: str) -> None: ...
    @property
    def platform(self) -> str: ...
    @abstractmethod
    def __hash__(self) -> int: ...
    @abstractmethod
    def __eq__(self, other: Any) -> bool: ...
    @abstractmethod
    def __lt__(self, other: Any) -> bool: ...
    @abstractmethod
    def __gt__(self, other: Any) -> bool: ...
    @abstractmethod
    def __le__(self, other: Any) -> bool: ...
    @abstractmethod
    def __ge__(self, other: Any) -> bool: ...
    def is_compatible(self, other: Any) -> bool: ...
    def _check_compatible(self, other: Any) -> None: ...

class DataVersion(AbstractVersion):
    _data_version: Incomplete
    def __init__(self, platform: str, data_version: int) -> None: ...
    @property
    def data_version(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: Any) -> bool: ...
    def __lt__(self, other: DataVersion) -> bool: ...
    def __gt__(self, other: DataVersion) -> bool: ...
    def __le__(self, other: DataVersion) -> bool: ...
    def __ge__(self, other: DataVersion) -> bool: ...
    def __repr__(self) -> str: ...

class SemanticVersion(AbstractVersion):
    _semantic_version: Incomplete
    def __init__(self, platform: str, semantic_version: tuple[int, ...]) -> None: ...
    @property
    def semantic_version(self) -> tuple[int, ...]: ...
    def __hash__(self) -> int: ...
    @staticmethod
    def _pad(a: tuple[int, ...], b: tuple[int, ...]) -> tuple[tuple[int, ...], tuple[int, ...]]: ...
    def __eq__(self, other: Any) -> bool: ...
    def __lt__(self, other: SemanticVersion) -> bool: ...
    def __gt__(self, other: SemanticVersion) -> bool: ...
    def __le__(self, other: SemanticVersion) -> bool: ...
    def __ge__(self, other: SemanticVersion) -> bool: ...
    def __repr__(self) -> str: ...

class VersionContainer:
    __slots__: Incomplete
    _version: Incomplete
    def __init__(self, version: AbstractVersion) -> None: ...
    @property
    def version(self) -> AbstractVersion:
        """
        The version this object is defined in.
        """
VersionT = TypeVar('VersionT', bound=AbstractVersion)

class VersionRange(Container[VersionT], Generic[VersionT]):
    _min: Incomplete
    _max: Incomplete
    def __init__(self, min_version: VersionT, max_version: VersionT) -> None: ...
    def __repr__(self) -> str: ...
    @property
    def min(self) -> VersionT: ...
    @property
    def max(self) -> VersionT: ...
    def __contains__(self, item: Any) -> bool: ...
VersionRangeT = TypeVar('VersionRangeT', bound=VersionRange)

class VersionRangeContainer(Generic[VersionRangeT]):
    _version_range: Incomplete
    def __init__(self, version_range: VersionRangeT) -> None: ...
    @property
    def version_range(self) -> VersionRangeT: ...
