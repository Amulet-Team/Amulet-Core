from _typeshed import Incomplete
from amulet.api import wrapper as api_wrapper
from amulet.api.chunk import Chunk as Chunk
from amulet.api.data_types import AnyNDArray as AnyNDArray, ChunkCoordinates as ChunkCoordinates, Dimension as Dimension, PlatformType as PlatformType, VersionNumberTuple as VersionNumberTuple
from amulet.api.errors import ChunkDoesNotExist as ChunkDoesNotExist, PlayerDoesNotExist as PlayerDoesNotExist
from amulet.api.wrapper import BaseFormatWrapper as BaseFormatWrapper, CreatableFormatWrapper as CreatableFormatWrapper, Interface as Interface
from amulet.player import Player as Player
from typing import Any, Dict, Iterable, List, Optional, Tuple

class VoidFormatWrapper(BaseFormatWrapper[VersionNumberTuple], CreatableFormatWrapper):
    """
    A custom :class:`FormatWrapper` class that has no associated data.

    This is just to make the :class:`ImmutableStructure` class happy since it requires a :class:`FormatWrapper` class.

    All methods effectively do nothing.
    """
    _platform: str
    _version: Incomplete
    def __init__(self) -> None: ...
    @classmethod
    def create(cls) -> BaseFormatWrapper: ...
    @property
    def level_name(self) -> str: ...
    @staticmethod
    def is_valid(token) -> bool: ...
    @staticmethod
    def valid_formats() -> Dict[PlatformType, Tuple[bool, bool]]: ...
    @property
    def dimensions(self) -> List[Dimension]: ...
    @property
    def can_add_dimension(self) -> bool: ...
    def register_dimension(self, dimension_identifier: Any): ...
    def _get_interface(self, raw_chunk_data: Optional[Any] = ...) -> Interface: ...
    def _encode(self, interface: api_wrapper.Interface, chunk: Chunk, dimension: Dimension, chunk_palette: AnyNDArray) -> Any: ...
    def _open(self) -> None: ...
    def _save(self) -> None: ...
    def _close(self) -> None: ...
    def unload(self) -> None: ...
    def all_chunk_coords(self, dimension: Dimension) -> Iterable[ChunkCoordinates]: ...
    def has_chunk(self, cx: int, cz: int, dimension: Dimension) -> bool: ...
    def _delete_chunk(self, cx: int, cz: int, dimension: Dimension): ...
    def _put_raw_chunk_data(self, cx: int, cz: int, data: Any, dimension: Dimension): ...
    def _get_raw_chunk_data(self, cx: int, cz: int, dimension: Dimension) -> Any: ...
    def all_player_ids(self) -> Iterable[str]: ...
    def has_player(self, player_id: str) -> bool: ...
    def _load_player(self, player_id: str) -> Player: ...
    def _get_raw_player_data(self, player_id: str) -> Any: ...
