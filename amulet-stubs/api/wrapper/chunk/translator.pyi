from PyMCTranslate import TranslationManager as TranslationManager, Version as Version
from _typeshed import Incomplete
from amulet import entity_support as entity_support
from amulet.api.chunk import BiomesShape as BiomesShape, Chunk as Chunk
from amulet.api.data_types import AnyNDArray as AnyNDArray, BlockCoordinates as BlockCoordinates, BlockNDArray as BlockNDArray, GetBlockCallback as GetBlockCallback, GetChunkCallback as GetChunkCallback, TranslateBlockCallback as TranslateBlockCallback, TranslateBlockCallbackReturn as TranslateBlockCallbackReturn, TranslateEntityCallback as TranslateEntityCallback, TranslateEntityCallbackReturn as TranslateEntityCallbackReturn, VersionIdentifierType as VersionIdentifierType, VersionNumberAny as VersionNumberAny
from amulet.block import Block as Block
from amulet.block_entity import BlockEntity as BlockEntity
from amulet.entity import Entity as Entity
from amulet.palette import BiomePalette as BiomePalette, BlockPalette as BlockPalette
from typing import Optional, Tuple

log: Incomplete

class Translator:
    def translator_key(self, version_number: VersionNumberAny) -> VersionIdentifierType: ...
    def _translator_key(self, version_number: VersionNumberAny) -> VersionIdentifierType:
        """
        Return the version key for PyMCTranslate

        :return: The tuple version key for PyMCTranslate
        """
    @staticmethod
    def is_valid(key: Tuple) -> bool:
        """
        Returns whether this translator is able to translate the chunk type with a given identifier key,
        generated by the decoder.

        :param key: The key who's decodability needs to be checked.
        :return: True if this translator is able to translate the chunk type associated with the key, False otherwise.
        """
    @staticmethod
    def _translate(chunk: Chunk, get_chunk_callback: Optional[GetChunkCallback], translate_block: TranslateBlockCallback, translate_entity: TranslateEntityCallback, full_translate: bool): ...
    def to_universal(self, chunk_version: VersionNumberAny, translation_manager: TranslationManager, chunk: Chunk, get_chunk_callback: Optional[GetChunkCallback], full_translate: bool) -> Chunk:
        """
        Translate an interface-specific chunk into the universal format.

        :param chunk_version: The version number (int or tuple) of the input chunk
        :param translation_manager: TranslationManager used for the translation
        :param chunk: The chunk to translate.
        :param get_chunk_callback: function callback to get a chunk's data
        :param full_translate: if true do a full translate. If false just unpack the block_palette (used in callback)
        :return: Chunk object in the universal format.
        """
    def _blocks_entities_to_universal(self, chunk_version: VersionNumberAny, translation_manager: TranslationManager, chunk: Chunk, get_chunk_callback: Optional[GetChunkCallback], full_translate: bool): ...
    @staticmethod
    def _biomes_to_universal(translator_version: Version, chunk: Chunk): ...
    def from_universal(self, max_world_version_number: VersionNumberAny, translation_manager: TranslationManager, chunk: Chunk, get_chunk_callback: Optional[GetChunkCallback], full_translate: bool) -> Chunk:
        """
        Translate a universal chunk into the interface-specific format.

        :param max_world_version_number: The version number (int or tuple) of the max world version
        :param translation_manager: TranslationManager used for the translation
        :param chunk: The chunk to translate.
        :param get_chunk_callback: function callback to get a chunk's data
        :param full_translate: if true do a full translate. If false just pack the block_palette (used in callback)
        :return: Chunk object in the interface-specific format and block_palette.
        """
    def _blocks_entities_from_universal(self, max_world_version_number: VersionNumberAny, translation_manager: TranslationManager, chunk: Chunk, get_chunk_callback: Optional[GetChunkCallback], full_translate: bool): ...
    @staticmethod
    def _biomes_from_universal(translator_version: Version, chunk: Chunk): ...
    def unpack(self, chunk_version: VersionNumberAny, translation_manager: TranslationManager, chunk: Chunk, palette: AnyNDArray) -> Chunk:
        """
        Unpack the version-specific block_palette into the stringified version where needed.

        :return: The block_palette converted to block objects.
        """
    @staticmethod
    def _unpack_blocks(translation_manager: TranslationManager, version_identifier: VersionIdentifierType, chunk: Chunk, block_palette: AnyNDArray):
        """
        Unpack the version-specific block_palette into the stringified version where needed.
        :return: The block_palette converted to block objects.
        """
    @staticmethod
    def _unpack_biomes(translation_manager: TranslationManager, version_identifier: VersionIdentifierType, chunk: Chunk):
        """
        Unpack the version-specific biome_palette into the stringified version where needed.
        :return: The biome_palette converted to biome objects.
        """
    def pack(self, max_world_version_number: VersionNumberAny, translation_manager: TranslationManager, chunk: Chunk) -> Tuple[Chunk, AnyNDArray]:
        """
        Translate the list of block objects into a version-specific block_palette.
        :return: The block_palette converted into version-specific blocks (ie id, data tuples for 1.12)
        """
    def _pack_block_palette(self, version: Version, palette: BlockNDArray) -> AnyNDArray:
        """
        Pack the list of block objects into a version-specific block_palette.
        :return: The block_palette converted into version-specific blocks (ie id, data tuples for 1.12)
        """
    @staticmethod
    def _pack_biomes(translation_manager: TranslationManager, version_identifier: VersionIdentifierType, chunk: Chunk):
        """
        Unpack the version-specific biome_palette into the stringified version where needed.
        :return: The biome_palette converted to biome objects.
        """
