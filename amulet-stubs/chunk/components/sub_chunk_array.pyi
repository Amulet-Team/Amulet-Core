import numpy
from _typeshed import Incomplete
from collections.abc import MutableMapping
from numpy.typing import ArrayLike as ArrayLike
from typing import Iterable, Iterator, Union

class SubChunkArrayContainer(MutableMapping[int, numpy.ndarray]):
    """A container of sub-chunk arrays"""
    _shape: Incomplete
    _arrays: Incomplete
    def __init__(self, array_shape: tuple[int, int, int], default_array: Union[int, ArrayLike], arrays: Iterable[int, ArrayLike] = ...) -> None: ...
    @property
    def array_shape(self) -> tuple[int, int, int]: ...
    @property
    def default_array(self) -> Union[int, numpy.ndarray]: ...
    _default_array: Incomplete
    @default_array.setter
    def default_array(self, default_array: Union[int, ArrayLike]): ...
    def _cast_array(self, array) -> numpy.ndarray: ...
    def populate(self, cy: int):
        """Populate the section from the default array."""
    def __setitem__(self, cy: int, array: ArrayLike): ...
    def __delitem__(self, cy: int) -> None: ...
    def __getitem__(self, cy: int) -> numpy.ndarray: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
