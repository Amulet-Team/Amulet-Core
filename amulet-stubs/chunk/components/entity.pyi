from _typeshed import Incomplete
from amulet.entity import Entity as Entity
from amulet.version import VersionRange as VersionRange, VersionRangeContainer as VersionRangeContainer
from collections.abc import MutableSet
from typing import Iterable, Iterator

class EntityContainer(VersionRangeContainer, MutableSet[Entity]):
    _entities: Incomplete
    def __init__(self, version_range: VersionRange) -> None: ...
    def add(self, entity: Entity): ...
    def discard(self, entity: Entity) -> None: ...
    def __contains__(self, entity: Entity) -> bool: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Entity]: ...

class EntityComponent:
    """A chunk that supports entities"""
    __entity: Incomplete
    def __init__(self, version_range: VersionRange) -> None: ...
    @property
    def entity(self) -> EntityContainer: ...
    @entity.setter
    def entity(self, entities: Iterable[Entity]): ...
