from __future__ import annotations

import types
import typing

__all__ = ["Holder", "Iterator", "Mapping", "MutableMapping"]

class Holder:
    """
    A utility class for keeping smart pointers alive.
    """

class Iterator:
    def __iter__(self: typing.Iterator) -> typing.Iterator: ...
    def __next__(self: typing.Iterator) -> typing.Any: ...

class Mapping:
    def __contains__(self, arg0: typing.Any) -> bool: ...
    def __eq__(self, arg0: typing.Any) -> bool | types.NotImplementedType: ...
    def __getitem__(self, arg0: typing.Any) -> typing.Any: ...
    def __hash__(self) -> int: ...
    def __iter__(self) -> typing.Iterator: ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
    def get(self, arg0: typing.Any, arg1: typing.Any) -> typing.Any: ...
    def items(self) -> typing.Any: ...
    def keys(self) -> typing.Any: ...
    def values(self) -> typing.Any: ...

class MutableMapping(Mapping):
    def __delitem__(self, arg0: typing.Any) -> None: ...
    def __setitem__(self, arg0: typing.Any, arg1: typing.Any) -> None: ...
    def clear(self) -> None: ...
    def pop(self, key: typing.Any, default: typing.Any = ...) -> typing.Any: ...
    def popitem(self) -> tuple[typing.Any, typing.Any]: ...
    def setdefault(self, arg0: typing.Any, arg1: typing.Any) -> typing.Any: ...
    def update(self, other: typing.Any = (), **kwargs) -> None: ...
