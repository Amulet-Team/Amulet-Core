from collections.abc import Hashable, Iterable, Iterator, Mapping, Set
from typing import Any, TypeVar

K = TypeVar("K", bound=Hashable)
V = TypeVar("V", bound=Hashable)

class FrozenMapping(Mapping[K, V], Hashable):
    """
    A hashable Mapping class.
    All values in the mapping must be hashable.
    """

    def __init__(self, mapping: Mapping) -> None: ...
    def __getitem__(self, k: K) -> V: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[K]: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: Any) -> bool: ...

class OrderedFrozenSet(Set[K], Hashable):
    def __init__(self, items: Iterable[K]) -> None: ...
    def __contains__(self, item: Any) -> bool: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[K]: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: Any) -> bool: ...
